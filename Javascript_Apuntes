 /* CURSO JAVASCRIPT (DE SOY DALTO) ***** DE 0 A JUNIOR 
 
https://www.youtube.com/watch?v=z95mZVUcJ-E&t=27145s
https://github.com/soydalto/curso-de-javascript/tree/main/capitulo%201/problema%201

· CAPITULO 0 -> Linea 80

 ---------- CAPITULO 1 ---------- Linea 116 
 
 Apertura del capitulo 1 
 Introducción a javascript 
Editor de texto 
 Usos de javascript 
 Formas de incluir javascript 
 Todo sobre variables 
 Pedir datos con prompt 
 Operadores en javascript (Básico)  
 Concatenación 
 Template Strings y el uso de Backticks 
 Operadores en javascript (Intermedio) 
 Camel Case en javascript 
 Condicionales 
 Historia de Cofla 1 (Crear soluciones) 
 
 ---------  CAPITULO 2  --------- 175
 
 - Apertura del capitulo 2 
- Matrices 
 - Arrays Asociativos (Objetos) 
 - Bucles e iteración (While, For, etc...) 
 - Funciones 
 - Historia de Cofla 2 (Crear soluciones) 
 
 --------- CAPITULO 3 ---------- 240
 
 - Apertura del capitulo 3 
 - POO (Programación orientada a objetos) 
 - Conceptos básicos de la Programación orientada a objetos 
 - Caracteristicas de la Programación orientada a objetos 
 - Otros conceptos de Programación orientada a objetos 
 - Historia de Cofla 3 (Crear soluciones) 
 
 --------  CAPITULO 4  --------- 263
 
 - Apertura del capitulo 4 
 - Métodos de cadenas 
 - Métodos de arrays 
   Objeto Math 
    Historia de Cofla 4 (Crear soluciones) 
 
 ---------  CAPITULO 5 ---------- 
 
  Apertura de capitulo 5 
  Console (Consola de javascript) 
  Métodos de registro en console 
  Métodos de conteo en console 
  Métodos de agrupación en console 
  Métodos de temporización en console 
  Historia de Cofla 5 (Crear soluciones) 
 
 ---------  CAPITULO 6 --------- 
 
 - Apertura de capitulo 6 
 - El DOM (Document Object Model) 
 - Métodos de selección de elementos  
   Métodos de atributos de un elemento 
 - Atributos globales 
 - Atributos de inputs 
 - Propiedad Style 
 - Clases, classList y sus métodos 
 - Obtención y modificación de elementos 
 - Creación de elementos 
 - Obtención y modificacion de childs 
 - Métodos de childs (hijos) 
 - Propiedades de parents (Padres) 
 - Propiedades de siblings (Hermanos) 
 - Nodos, una propiedad extra 
 - Historia de cofla 6 (Crear soluciones) 

 ---------- CAPITULO 0 ----------
 Lenguaje de programación: Herramienta que nos permite darle instrucciones a un ordenador.
 
 Tipos de lenguajes:
 · Compilados: Compliador(programa que procesa un codigo en ingles y lo traduce a codigo de maquina).
               Ejemplos: C# , c++ , Go.
 
 · Interpretados: Interprete (programa que procesa un codigo en ingles y lo traduce a codigo de maquina).
     Diferencia con compilador, lo traduce en tiempo de ejecucion.
     Ventaja, para el programador es mas facil, ya que no lo tiene que compilar.
     Desventaja, es mas lento.
     Ejemplos: - Javascript  - Php   - Python  - Ruby
     
  · Intermedio : El programador lo compila a bytecode (no codigo maquina) y despues se interpreta.
                 Permite ser interpretado en cualquier s.o. mientras tenga la maquina virtual de Java instalado.
            
  · JVM Java Virtual Machine : -Kotlin  -  Scala
  
  · Declarativo
  · Imperativo
  
  · Paradigma : - Multi-paradigma  - POO      - Funcionales  - Rectiva
                  Javascript         Java       Haskell        RX
                  Python             Kotlin     Elixir
                  Php                C++        Erlang
                                     
                                     
                                     
  · De proposito general Java C C# Python
  · De proposito especifico (DSL) : SQL , HTML , CSS , Logo
  
  · Por nivel: Alto   Bajo
  
   ---------- CAPITULO 1 ----------
  
 Javascript
 
 Introduccion
 
 Javascript es un lenguajes de programación interpretado, orientado a objetos, imperativo (va linea por linea), Case sensitive, basado en protoipos-instancias-classless, de tipado débil,
                  lenguaje dinámico (la variable se adapta al dato).
                  Esta construido sobre ECMASCRIPT


 Usos de javascript
  · Dinamismo de sitios webs
  · Servidor en NodeJS ( Backend )
  · Tecnologias Frontend como Angular,, ReACT O Vue.JS
  
  Otros usos menos comunes
  · Inteligencia artificial
  · Placas electrónicas ( Jhonny Five)
  · Mobile Apps
  · Desktop Apps
  
  
 Formas de enlazar javascript 
 · En linea 
 · Como contenido en la etiqueta <script>
 · Como contenido en un archivo de format.js
 · Con un require
 
 Todo sobre variables
 
 Variable: Espacio que guardamos en memoria.
 
 Tipos de Datos : String = "" '' ``  , Number, Boolean = true o false.        Casos especiales de datos: Undefined , Null, NaN.
 
 Declarar variables var = alcance global 
                    let = limita el alcance(scope) al bloque en que se ejecuta. 
                    const = su valor es constante.
        
 Hoisting ¿? 
 
 Prompt = Funcion que guarda un dato introducido
 
 Operadores en javascript (Básico) 
 · Aritmeticos   · Asignación  · Concatenación   · 
 
 Operadores Intermedios -> · Lógicos  · Comparación
 
 Camel Case = declararVariablesAsi
 
 
 Condicionales
 Condicional: Sentencia que nos permite validar algo. Ejecutar un bloque de codigo si las condiciones dadas son verdaderas.

 If (si la condicion es verdad , se ejecuta){este codigo}
 Elseif ( si if no se ejecuta, mira si esta condicion se cumple. si se cumple){ejecuta esto}
 Else ( Si no se ha ejecutado nada ){ haz esto}

 
 Historia de Cofla 1 (Crear soluciones)
 
 
 ---------  CAPITULO 2  ---------
 
 - Array 
   Es una colección o agrupación de elementos en una misma variable,
   cada uno de ellos ubicado con referencia a la posición que ocupa dentro del mismo.
   Tanto la longitud como el tipo de los elementos de un array son variables.  EJ: let usr = ["Cristian", 30,"Ciudadela"] ; document.write(usr) o
                                                                                                                            document.write(usr[0]) --> Cristian
   
 - Arrays Asociativos (Objetos)
   Un array asociativo es aquel en el que cada elemento no está asociado a su posición numérica dentro del array, 
   sino que está asociado a otro valor específico.                       EJ: let pc = {                        let nombre = pc1["nombre"];
                                                                                         nombre: "MiPc",       let procesador = pc1["procesador"];
                                                                                         procesadro: "I-7",    let nombre = pc1["nombre"];
                                                                                         ram: "4GB",           let nombre = pc1["nombre"];
                                                                                         espacio: "1TB"        frase = `El nombre de mi PC es: <b>${nombre}</b><br>
                                                                                                                        el procesador es: <b>${procesador}</b><br>`;
                                                                                        };
   
 - Bucles e iteración (While, For, etc...)
    Los condicionales, si la condicion se cumple se ejecuta, pero los bucles al terminar de ejecutarse vuelve a mirar si la condicion es verdadera, si lo es lo vuelve
                              a ejecutar.
   Indeterminado                           
   · While (mientras)     · Do while (Primero ejecuta y luego pregunta)
    
    Determinado
   · For 
   · For in (devuelve indice,posicion)   · For of (devuelve contenido,valor)
  
 - Recorrer array dentro de un array:
 
  array1=["a","b","c"];
  array2=["d","e",array1];
  
   forRancio: 
   for (let array in array2){
        if (array == 2){
        for (let array of array1) {
        documnet.write(array + "<br>");
        } else { 
          documnet.write(array2[array] + "<br>");
        }
       }
   
   -Sentencia Label (asocia un nombre a un bucle) -> forRancio: 
   
   
 - Funciones Bloque de codigo que se ejecuta al llamarlo              Ej: function saludar(){
              Debe tomar alguna entrada y devolver una                     respuesta = prompt("Hola, como fue tu dia?");
              salida donde hay alguna relación obvia                  if (respuesta == bien){
                        entre la entrada y la salida                        alert("Me alrgro");
                                                                         }else{
                                                                              alert(""}
                                                                             }}
                                                                             
 · return  finaliza la ejecución de la función y especifica un valor 
           para ser devuelto a quien llama a la función.
           
  · Funciones flecha
  
  1-const saludar = (nombre,edad)=>{}
  2-const saludar = nombre=>
                                                                             
 Parámetros son los valores que la función espera recibir.
 En un prototipo de función, los paréntesis detrás del nombre de la función contienen una lista completa de los parámetros de la función y de sus tipos.
 
 --------- CAPITULO 3 ---------
 
 - POO (Programación orientada a objetos) Paradigma
 - Conceptos básicos de la Programación orientada a objetos
   · Clase ( fabrica de objetos , plantilla) 
   · Objeto (resultado de la clase)
   · Atributo (particularidades, propiedades, caracteristicas.
   · Metodo ( que hace, funcion)
   · Constructor funcion que constuye las propiedades de los elelmentos
   · Instanciacion

 - Caracteristicas de la Programación orientada a objetos
   Abstraccion (resumir), Modularidad (Resolver problemas por partes), Encapsulamiento (Aislar)
   
  - Otros conceptos de Programación orientada a objetos 
   Polimorfismo : Diferentes objetos se comportan diferente con el mismo metodo
   Herencia
     Ej class perro extends animal{
              constructor(especie,edad,color)
              super(especie,edad)
              this.color=color}
        
 
 --------  CAPITULO 4  ---------

 - Métodos de cadenas
   · startsWith-endsWith , includes, indexOf, lastIndexOf, padStart, padEnd, repeat
   · split (divide la cadena) · substring (recorta) · toLowerCase - toUpperCase  · tostring  
   · trim (elimina espacios) -  trimEnd  - trimStart
 
 - Métodos de arrays
   Transformadores
   pop ( elimina el ultimo elemento de un array )
   shift ( elimina el primer elemento de un array )
   push  ( agrega un elemento al final del array y devuelve la cantidad )
   reverse invierte el orden del array
   unshift ( agrega uno o mas elementos al principio )
   sort ( ordena )
   splice ( cambia el contenido de un array, parametro 1 donde arranca, parametro 2 elementos a eliminar, parametro 3 elementos a añadir )
   
   
   accesores
   join  ( une todos los elementos de una matriz, u objeto similar, en una cadena y la devueleve)
   slice ( devuelve una parte del array dentro de un nuevo array, del comienzo al fin, fin no incluido)
   
   Objeto Math
   Metodos
   sqrt raiz cuadrada de un numero.    cbrt raiz cubuica de un numero
   max-min recibe muchos numeros y devuelve el numero mas grande (max), y el mas pequeño(min)
   random devuelve un numero pseudoaleatorio entre 0 y 1
   fround Devuelve la representacion flotante de precision smiple mas cercana (4bytes)
   floor Devuelve el mayor entero menor que o igual a un numero(quita los decimales, redondea hacia abajo)
   trunc Devuelve la parte entera del numero x, eliminacion de los digitos fraccionarios (quita los decimales)
   
   Numero random entre 1 y 100
   
   numero = Math.random()*99;
   numero = Math.floor(numero+1);
   
   document.write(numero)
   
   Propiedades
   PI SQRT1_2, SQRT2
   
 ---------  CAPITULO 5 ----------
  Console (Consola de javascript)
  
  Métodos de registro en console
  assert Aparece un mensaje de error en la consol si la afirmacion es falsa. si es verdadera no aparecera nada.
  clear Limpia la consola
  error Muestra un mensaje de error en consola
  info Emite un mensaje informativo a la consola
  log Muestra un mensaje en la consola 
  table Esta funcion toma un argumento obligatorio: data , que debe ser nu array o un y un parametro adicional: columns y nos muestra una tabla en consola
  warn Imprime un mensaje de advertencia en consola
  
  
  Métodos de conteo en console
  count Registra el numero de veces que se llama a count, toma como argumento opcional una etiqueta
  countReset Resetea el contador console.count
  
  Métodos de agrupación en console
  group Crea un nuevo grupo en linea en el registro de la consola
  groupEnd Remueve un grupo en linea en el registro de la consola
  groupCpllapsed Crea un grupo en linea pero contraido
  
  Métodos de temporización en console
  time Inicia un temporizador
  timeEnd Detiene el temorizador
  timeLog Registra el valor actual de un temporizador
 
 ---------  CAPITULO 6 ---------
 
 - El DOM (Document Object Model)
   Interfaz que contiene todos los objetos estandares que nos permiten representar un documento html, xml o xhtml. 
   Que a su vez tiene otra interfaz que nos permite decir que combina con que.
   Y otra que nos permite trabajar con javascript.
   
  Nodo Cualquier etiqueta que este en el cuerpo
   
 - Métodos de selección de elementos 
 getElementById
 getElementByTagName
 querySelector
 querySelectorAll
 
   Métodos de atributos de un elemento
 Definir, obtener y eliminar valores de atributos
 setAttribute getAttribute  removeAttribute
 
 - Atributos globales
 class             Lista de clases del elemento separadas por espacios.
 contenteditable   Indica si el contenido puede ser modificado por el usuario (bool)
 dir               Indica la direccionalidad del texto.
 hidden            Indica si el elemenro aun no es o ya no es relevante
 id                define un identificador único.
 style             Contiene declaraciones de estilo CSS para ser aplicadas al elemento.
 tabindex          Indica si el elemento peude obtener focus de input.
 title             Contiene un texto de informacion ralcionada al elemento que pertenece
 
 - Atributos de inputs
 - Propiedad Style
 - Clases, classList y sus métodos
 - Obtención y modificación de elementos
 - Creación de elementos
 - Obtención y modificacion de childs
 - Métodos de childs (hijos)
 - Propiedades de parents (Padres)
 - Propiedades de siblings (Hermanos)
 - Nodos, una propiedad extra
 - Historia de cofla 6 (Crear soluciones)
 
 
